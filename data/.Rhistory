geom_line(color='dark green') +
ggtitle('Italy')
ggplot(italy, aes(x=day, y=confirmed)) +
geom_line(color='dark green', size = 10) +
ggtitle('Italy')
ggplot(italy, aes(x=day, y=confirmed)) +
geom_line(color='dark green', size = 2) +
ggtitle('Italy')
ggplot(italy, aes(x=day, y=confirmed)) +
geom_line(color='dark green', size = 2) +
geom_point()
ggplot(italy, aes(x=day, y=confirmed)) +
geom_line(color='dark green', size = 2) +
ggtitle('Italy')
ggplot(italy, aes(x=day, y=confirmed)) +
geom_line(color='dark green', size = 1) +
ggtitle('Italy')
ggplot(italy, aes(x=day, y=confirmed)) +
geom_line(color='dark green', size = 1.5) +
ggtitle('Italy')
ggplot(s_korea, aes(x=day, y=confirmed)) +
geom_line(color='orange', size = 1.5) +
ggtitle('South Korea')
ggplot(taiwan, aes(x=day, y=confirmed)) +
geom_line(color='dark blue', size = 1.5) +
ggtitle('Taiwan')
# Eksplorasi Data
ggplot(combine, aes(x=day, y=confirmed, color=Country.Region)) +
geom_line(size = 1.3)
# Eksplorasi Data
ggplot(combine, aes(x=day, y=confirmed, color=Country.Region)) +
geom_line(size = 1.2)
# Eksplorasi Data
ggplot(combine, aes(x=day, y=confirmed, color=Country.Region)) +
geom_line(size = 1.2)
# Eksplorasi Data
ggplot(combine, aes(x=day, y=confirmed, color=Country.Region)) +
geom_line(size = 1.1)
package.install("gganimate")
install.packages("gganimate")
library(gganimate)
install.packages("gifski")
View(combine)
# Eksplorasi Data
ggplot(combine, aes(x=day, y=confirmed, color=Country.Region)) +
geom_line(size = 1.1) +
labs(title = 'Date : {frame_time}', x='Date', y='Confirmed') +
transition_time(day) +
ease_aes('linear')
install.packages('transformr')
# Eksplorasi Data
ggplot(combine, aes(x=day, y=confirmed, color=Country.Region)) +
geom_line(size = 1.1) +
labs(title = 'Date : {frame_time}', x='Date', y='Confirmed') +
transition_time(day) +
ease_aes('linear')
ggplot(combine, aes(x=day, y=confirmed, color=Country.Region)) +
geom_line(size = 1.1) +
ggplot(combine, aes(x=day, y=confirmed, color=Country.Region)) +
geom_line(size = 1.1)
ggplot(combine, aes(x=day, y=confirmed, color=Country.Region)) +
geom_line(size = 1.1)
combine <- rbind(indonesia, italy, singapore, s_korea)
combine %>%
arrange(day)
combine <- combine %>%
arrange(day)
combine
# Eksplorasi Data
ggplot(combine, aes(x=day, y=confirmed, color=Country.Region)) +
geom_line(size = 1.1) +
labs(title = 'Date : {frame_time}', x='Date', y='Confirmed') +
transition_time(day) +
ease_aes('linear')
# Eksplorasi Data
ggplot(combine, aes(x=day, y=confirmed, color=Country.Region, group = 1)) +
geom_line(size = 1.1) +
labs(title = 'Date : {frame_time}', x='Date', y='Confirmed') +
transition_time(day) +
ease_aes('linear')
ggplot(combine, aes(x=day, y=confirmed, color=Country.Region, group = 1)) +
geom_line(size = 1.1)
ggplot(combine, aes(x=day, y=confirmed, color=Country.Region)) +
geom_line(size = 1.1)
str combine
str (combine)
ggplot(combine, aes(x=day, y=confirmed, group = Country.Region, color=Country.Region)) +
geom_line(size = 1.1) +
labs(title = 'Date : {frame_time}', x='Date', y='Confirmed') +
transition_time(day) +
ease_aes('linear')
# Eksplorasi Data
ggplot(combine, aes(x=day, y=confirmed, group = Country.Region, color = Country.Region)) +
geom_line(size = 1.1) +
labs(title = 'Date : {frame_time}', x='Date', y='Confirmed') +
transition_reveal(year) +
ease_aes('linear')
# Eksplorasi Data
ggplot(combine, aes(x=day, y=confirmed, group = Country.Region, color = Country.Region)) +
geom_line(size = 1.1) +
labs(title = 'Date : {frame_time}', x='Date', y='Confirmed') +
transition_reveal(year)
library(babynames)
library(hrbrthemes)
babynames
# Eksplorasi Data
ggplot(combine, aes(x=day, y=confirmed, group = Country.Region, color = Country.Region)) +
geom_line(size = 1.1) +
labs(title = 'Date : {frame_time}', x='Date', y='Confirmed') +
transition_reveal(day)
# Eksplorasi Data
ggplot(combine, aes(x=day, y=confirmed, group = Country.Region, color = Country.Region)) +
geom_line(size = 1.1) +
labs(title = 'Date : {frame_time}', x='Date', y='Confirmed') +
transition_time(day) +
ease_aes('linear')
combine <- rbind(indonesia, italy, singapore, s_korea)
combine
# Eksplorasi Data
ggplot(combine, aes(x=day, y=confirmed, group = Country.Region, color = Country.Region)) +
geom_line(size = 1.1) +
labs(title = 'Date : {frame_time}', x='Date', y='Confirmed') +
transition_time(day) +
ease_aes('linear')
day = as.Date("2020-01-22") + 0:(nrow(table_confirmed)-1)
table_confirmed <- data_confirmed_pivot[data_confirmed_pivot$Country.Region == country, ]
View(indonesia)
day = as.Date("2020-01-22") + 0:81
day
typeof(day)
day = as.Date(day)
typeof(day)
ggplot(italy, aes(x=day, y=confirmed)) +
geom_line(color='dark green', size = 1.5) +
ggtitle('Italy') +
transition_time(day) +
ease_aes('linear')
ggplot(italy, aes(x=day, y=confirmed, group = 1)) +
geom_line(color='dark green', size = 1.5) +
ggtitle('Italy') +
transition_time(day) +
ease_aes('linear')
ggplot(italy, aes(x=day, y=confirmed, group = 1)) +
geom_line(color='dark green', size = 1.5) +
ggtitle('Italy')
ggplot(italy, aes(x=day, y=confirmed, group = 1)) +
geom_line(color='dark green', size = 1.5) +
ggtitle('Italy')
ggplot(italy, aes(x=day, y=confirmed, group = 1)) +
geom_line(color='dark green', size = 1.5) +
ggtitle('Italy')
ggplot(italy, aes(x=day, y=confirmed, group = 1)) +
geom_line(color='dark green', size = 1.5) +
ggtitle('Italy')
ggplot(italy, aes(x=day, y=confirmed, group = 1)) +
geom_line(color='dark green', size = 1.5) +
ggtitle('Italy')
ggplot(italy, aes(x=day, y=confirmed)) +
geom_line(color='dark green', size = 1.5) +
ggtitle('Italy')
ggplot(italy, aes(x=day, y=confirmed)) +
geom_line(color='dark green', size = 1.5) +
ggtitle('Italy') +
transition_time(day)
babynames
head(combine)
str(combine)
# Mengambil negara terkait, akan diambil Indonesia, Korsel, Singapura, Italia, Cina, dan AS
indonesia <- table_creator("Indonesia")
combine <- rbind(indonesia, italy, singapore, s_korea)
combine <- combine %>%
arrange(day)
combine
combine <- as_tibble(combine)
combine
ggplot(combine, aes(x=day, y=confirmed, group = Country.Region, color = Country.Region)) +
geom_line(size = 1.1) +
labs(title = 'Date : {frame_time}', x='Date', y='Confirmed')
ggplot(combine, aes(x=day, y=confirmed, group = Country.Region, color = Country.Region)) +
geom_line(size = 1.1)
ggplot(combine, aes(x=day, y=confirmed, color = Country.Region)) +
geom_line(size = 1.1)
ggplot(combine, aes(x=day, y=confirmed, color = Country.Region)) +
geom_line(size = 1.1)
ggplot(combine, aes(x=day, y=confirmed, color = Country.Region)) +
geom_line(size = 1.1)
ggplot(combine, aes(x=day, y=confirmed, color = Country.Region)) +
geom_line(size = 1.1)
ggplot(combine, aes(x=day, y=confirmed, color = Country.Region)) +
geom_line(size = 1.1)
ggplot(combine, aes(x=day, y=confirmed, color = Country.Region)) +
geom_line(size = 1.1)
ggplot(combine, aes(x=day, y=confirmed, color = Country.Region)) +
geom_line(size = 1.1)
ggplot(italy, aes(x=day, y=confirmed)) +
geom_line(color='dark green', size = 1.5) +
ggtitle('Italy')
ggplot(s_korea, aes(x=day, y=confirmed)) +
geom_line(color='orange', size = 1.5) +
ggtitle('South Korea')
install.packages("genalg")
library(genalg)
dataset <- data.frame(
item = c("pocket knife", "beans", "potatoes", "unions", "sleeping bag", "rope", "compass"),
survivalpoints = c(10, 20, 15, 2, 30, 10, 30),
weights = c(1, 5, 10, 1, 7, 5, 1)
)
weightlimit <- 20
chromosome = c(1, 0, 0, 1, 1, 0, 0)
dataset[chromosome == 1, ]
cat(chromosome %*% dataset$survivalpoints)
evalFunc <- function(x) {
current_solution_survivalpoints <- x %*% dataset$survivalpoints
current_solution_weight <- x %*% dataset$weight
if (current_solution_weight > weightlimit) return(0)
else return(-current_solution_survivalpoints)
}
iter = 100
rbga.results <- rbga.bin(size = 7, popSize = 200, iters = iter, mutationChance = 0.01, elitism = T, evalFunc = evalFunc)
cat(summary(rbga.results))
source("https://bioconductor.org/biocLite.R")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.60")
BiocManager::install()
str(Titanic)
df <- as.data.frame(Titanic)
head(df)
install.packages('arules')
# Ubah data hasil tabulasi menjadi per penumpang
## Ambil kolom selain "Freq"
cols <- colnames(df)[! colnames(df) %in% "Freq"]
titanic <- sapply(cols,
function(col) {
## Replikasi masing-masing nilai sebanyak "Freq"
rep(df[, col], df$Freq)
})
# Ubah matrix data menjadi data.frame
titanic <- as.data.frame(titanic)
# Ringkasan statistik
summary(titanic)
library(arules)
rules <- apriori(titanic)
# Urutkan rules berdasarkan "lift"
rules <- sort(rules, by="lift")
# Lihat 10 rules terbaik yang terbentuk
inspect(rules[1:10])
# Parameter yang akan diterapkan
params = list(minlen = 2,
support = 0.005,
confidence = 0.8)
# Terapkan algoritme
rules <- apriori(titanic, parameter = params)
rules <- apriori(titanic,
parameter = params,
appearance = list(rhs = c('Survived=Yes'),
default = 'lhs'))
# Urutkan rules berdasarkan "lift"
rules <- sort(rules, by='lift')
# Lihat rules yang terbentuk
inspect(rules)
# Membentuk matriks hubungan subset
subset_matrix <- is.subset(rules, rules)
subset_matrix[lower.tri(subset_matrix)] <- FALSE
# Menentukan rules yang redundan
redundant <- colSums(subset_matrix) > 1
# Untuk melihat rules yang redundan: > which(redundant)
# Ambil rules yang tidak redundan
rules_pruned <- rules[!redundant]
inspect(rules_pruned)
install.packages('arulesViz')
plot(rules_pruned)
# Muat pustaka
# install.packages('arulesViz')
library(arulesViz)
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
library(rlang)
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
# Muat pustaka
# install.packages('arulesViz')
library(arulesViz)
plot(rules_pruned)
remove.packages("rlang", lib="~/R/win-library/3.6")
install.packages("rlang")
install.packages("rlang")
# Muat pustaka
# install.packages('arulesViz')
library(arulesViz)
plot(rules_pruned)
str(Titanic)
df <- as.data.frame(Titanic)
head(df)
# Ubah data hasil tabulasi menjadi per penumpang
## Ambil kolom selain "Freq"
cols <- colnames(df)[! colnames(df) %in% "Freq"]
titanic <- sapply(cols,
function(col) {
## Replikasi masing-masing nilai sebanyak "Freq"
rep(df[, col], df$Freq)
})
# Ubah matrix data menjadi data.frame
titanic <- as.data.frame(titanic)
# Ringkasan statistik
summary(titanic)
# Parameter yang akan diterapkan
params = list(minlen = 2,
support = 0.005,
confidence = 0.8)
rules <- apriori(titanic,
parameter = params,
appearance = list(rhs = c('Survived=Yes'),
default = 'lhs'))
# Urutkan rules berdasarkan "lift"
rules <- sort(rules, by='lift')
library(arules)
rules <- apriori(titanic)
# Urutkan rules berdasarkan "lift"
rules <- sort(rules, by="lift")
str(Titanic)
df <- as.data.frame(Titanic)
head(df)
# Ubah data hasil tabulasi menjadi per penumpang
## Ambil kolom selain "Freq"
cols <- colnames(df)[! colnames(df) %in% "Freq"]
titanic <- sapply(cols,
function(col) {
## Replikasi masing-masing nilai sebanyak "Freq"
rep(df[, col], df$Freq)
})
# Ubah matrix data menjadi data.frame
titanic <- as.data.frame(titanic)
# Ringkasan statistik
summary(titanic)
library(arules)
rules <- apriori(titanic)
unloadNamespace("arules")
unloadNamespace("arulesViz")
update.packages("arules")
library(arules)
# Muat pustaka
# install.packages('arulesViz')
library(arulesViz)
str(Titanic)
df <- as.data.frame(Titanic)
head(df)
# Ubah data hasil tabulasi menjadi per penumpang
## Ambil kolom selain "Freq"
cols <- colnames(df)[! colnames(df) %in% "Freq"]
titanic <- sapply(cols,
function(col) {
## Replikasi masing-masing nilai sebanyak "Freq"
rep(df[, col], df$Freq)
})
# Ubah matrix data menjadi data.frame
titanic <- as.data.frame(titanic)
# Ringkasan statistik
summary(titanic)
library(arules)
rules <- apriori(titanic)
# Urutkan rules berdasarkan "lift"
rules <- sort(rules, by="lift")
# Lihat 10 rules terbaik yang terbentuk
inspect(rules[1:10])
install.packages("topicmodels")
# Topic Modelling with LDA
# install.packages("topicmodels")
library(topicmodels)
library(tidytext)
text %>%
unnest_tokens(input = pre_processed_text, output = word) %>%
count(unigram)
# Topic Modelling with LDA
# install.packages("topicmodels")
library(dplyr)
text %>%
unnest_tokens(input = pre_processed_text, output = word) %>%
count(unigram)
df <- read.csv('./data/dataset_fix.csv', stringsAsFactors = F)
setwd("D:/_Kuliah/3_Junior/KOM332 Daming/daming-projek/data")
df <- read.csv('./data/dataset_fix.csv', stringsAsFactors = F)
df <- read.csv('dataset_fix.csv', stringsAsFactors = F)
View(df)
text <- df[, c(1,6)]
text %>%
unnest_tokens(input = pre_processed_text, output = word) %>%
count(unigram)
text %>%
unnest_tokens(input = pre_processed_text, output = word) %>%
count(word)
str(df)
dtm <- text %>%
unnest_tokens(input = pre_processed_text, output = word) %>%
count(word) %>%
cast_dtm(1:10000, word, n)
1:10000
dtm <- text %>%
unnest_tokens(input = pre_processed_text, output = word) %>%
count(word) %>%
cast_dtm(id, word, n)
text %>%
unnest_tokens(input = pre_processed_text, output = word) %>%
count(word)
tidy(text)
tidy(df)
df <- read.csv('dataset_fix.csv', stringsAsFactors = F)
tidy(df)
text <- df[, c(1,6)]
text
str(text)
text <- tibble(document=1:10000, text = df$pre_processed_text)
text
dtm <- text %>%
unnest_tokens(input = pre_processed_text, output = word) %>%
count(word)
text %>%
unnest_tokens(input = pre_processed_text, output = text)
text %>%
unnest_tokens(input = text, output = word)
text %>%
unnest_tokens(input = text, output = word) %>%
count(word)
tidytweet <- text %>%
unnest_tokens(input = text, output = word) %>%
count(word)
tidytweet
tidytweet <- text %>%
unnest_tokens(input = text, output = word)
tidytweet
tidytweet <- text %>%
unnest_tokens(input = text, output = word) %>%
count(word) %>%
ungroup()
tidytweet
text
tidytweet <- text %>%
unnest_tokens(input = text, output = word) %>%
count(word) %>%
cast_dtm(document, word, n)
text %>%
unnest_tokens(input = text, output = word) %>%
count(document, word)
tidytweet <- text %>%
unnest_tokens(input = text, output = word) %>%
count(document, word) %>%
cast_dtm(document, word, n)
dtm <- text %>%
unnest_tokens(input = text, output = word) %>%
count(document, word) %>%
cast_dtm(document, word, n)
# Topic Modelling with LDA
# install.packages("topicmodels")
library(dplyr)
library(topicmodels)
library(tidytext)
df <- read.csv('dataset_fix.csv', stringsAsFactors = F)
text <- tibble(document=1:10000, text = df$pre_processed_text)
text
dtm <- text %>%
unnest_tokens(input = text, output = word) %>%
count(document, word) %>%
cast_dtm(document, word, n)
mod_log_lik = numeric(10)
mod_perplexity = numeric(10)
for (i in 2:10) {
mod = LDA(dtm, k = i, method = "Gibbs",
control=list(alpha = 0.5, iter = 1000, seed = 123, thin = 1))
mod_log_lik[i] = logLik(mod)
mod_perplexity[i] = perplexity(mod, dtm)
}
library(ggplot2)
ggplot(aes(x=2:10, y=mod_log_lik)) +
geom_line()
ggplot() +
geom_line(x=2:10, y=mod_log_lik)
ggplot(x=2:10, y=mod_log_lik) +
geom_line()
plot(2:10, mod_log_lik)
plot(1:10, mod_log_lik)
line(1:10, mod_log_lik)
help(plot)
plot(1:10, mod_log_lik, l)
help(plot)
plot(1:10, mod_log_lik, type="b", xlab="k", ylab="Model Likelihood")
plot(1:10, mod_perplexity, type="b", xlab="k", ylab="Model Perplexity")
plot(1:10, mod_log_lik, type="b", xlab="k", ylab="Model Likelihood")
plot(1:10, mod_perplexity, type="b", xlab="k", ylab="Model Perplexity")
plot(1:10, mod_log_lik, type="b", xlab="k", ylab="Model Likelihood")
plot(1:10, mod_perplexity, type="b", xlab="k", ylab="Model Perplexity")
plot(1:10, mod_log_lik, type="b", xlab="k", ylab="Model Likelihood")
mod_fix <- LDA(dtm, k = 6, method = "Gibbs",
control = list(alpha = 0.5, iter = 1000, seed = 123, thin = 1))
mod_log_lik
mod_perplexity
tweet_topics <- tidy(mod_fix, matrix = "beta")
tweet_topics_top_terms <- tweet_topics %>%
group_by(topic) %>%
top_n(10, beta) %>%
ungroup() %>%
arrange(topic, -beta)
tweet_topics
tweet_topics_top_terms %>%
mutate(term = reorder_within(term, beta, topic)) %>%
ggplot(aes(term, beta, fill = factor(topic))) +
geom_col(show.legend = F) +
facet_wrap(~ topic, scales = "free") +
coord_flip() +
scale_x_reordered()
